S :: decls
decls :: funcdecl decls
decls :: classdecl decls
decls :: vardecl decls
decls :: SEMI decls
decls :: λ
funcdecl :: FUNC ID LPAREN optionalPdecls RPAREN optionalReturn LBRACE stmts RBRACE SEMI
braceblock :: LBRACE stmts RBRACE
optionalReturn :: λ
optionalReturn :: COLON TYPE
optionalSemi :: λ
optionalSemi :: SEMI
optionalPdecls :: λ
optionalPdecls :: pdecls
pdecls :: pdecl
pdecls :: pdecl COMMA pdecls
pdecl :: ID COLON TYPE
classdecl :: CLASS ID LBRACE memberdecls RBRACE SEMI
memberdecls :: λ
memberdecls :: SEMI memberdecls
memberdecls :: membervardecl memberdecls
memberdecls :: memberfuncdecl memberdecls
membervardecl :: VAR ID COLON TYPE SEMI
memberfuncdecl :: funcdecl
stmts :: stmt SEMI stmts
stmts :: SEMI
stmts :: λ
stmt :: assign
stmt :: cond
stmt :: loop
stmt :: vardecl
stmt :: return
assign :: expr EQ expr
cond :: IF LPAREN expr RPAREN braceblock
cond :: IF LPAREN expr RPAREN braceblock ELSE braceblock
loop :: WHILE LPAREN expr RPAREN braceblock
loop :: REPEAT braceblock UNTIL LPAREN expr RPAREN
return :: RETURN expr
return :: RETURN
vardecl :: VAR ID COLON TYPE
vardecl :: VAR ID COLON ID
expr :: orexp
orexp :: orexp OROP andexp
orexp :: andexp
andexp :: andexp ANDOP relexp
andexp :: relexp
relexp :: bitexp RELOP bitexp
relexp :: bitexp
bitexp :: bitexp BITOP shiftexp
bitexp :: shiftexp
shiftexp :: shiftexp SHIFTOP sumexp
shiftexp :: sumexp
sumexp :: sumexp ADDOP prodexp
sumexp :: prodexp
prodexp :: prodexp MULOP powexp
prodexp :: powexp
powexp :: unaryexp POWOP powexp
powexp :: unaryexp
unaryexp :: BITNOTOP unaryexp
unaryexp :: NOTOP unaryexp
unaryexp :: ADDOP unaryexp
unaryexp :: preincexp
preincexp :: PLUSPLUS preincexp
preincexp :: postincexp
postincexp :: postincexp PLUSPLUS
postincexp :: amfexp
amfexp :: amfexp DOT factor
amfexp :: amfexp LBRACKET expr RBRACKET
amfexp :: amfexp LPAREN calllist RPAREN
amfexp :: factor
factor :: NUM
factor :: LPAREN expr RPAREN
factor :: ID
factor :: FNUM
factor :: STRINGCONST
factor :: BOOLCONST
calllist :: λ
calllist :: calllist2 COMMA expr
calllist2 :: expr
calllist2 :: calllist2 COMMA expr

Nullable: decls , optionalReturn , optionalSemi , optionalPdecls , memberdecls , stmts , calllist , S
first[ADDOP] = ADDOP
first[ANDOP] = ANDOP
first[ARROW] = ARROW
first[BITNOTOP] = BITNOTOP
first[BITOP] = BITOP
first[BOOLCONST] = BOOLCONST
first[BREAK] = BREAK
first[CLASS] = CLASS
first[COLON] = COLON
first[COMMA] = COMMA
first[COMMENT] = COMMENT
first[CONTINUE] = CONTINUE
first[DOT] = DOT
first[ELSE] = ELSE
first[EQ] = EQ
first[FNUM] = FNUM
first[FUNC] = FUNC
first[IF] = IF
first[LBRACE] = LBRACE
first[LBRACKET] = LBRACKET
first[LPAREN] = LPAREN
first[MULOP] = MULOP
first[NOTOP] = NOTOP
first[NUM] = NUM
first[OROP] = OROP
first[POWOP] = POWOP
first[PLUSPLUS] = PLUSPLUS
first[RBRACE] = RBRACE
first[RBRACKET] = RBRACKET
first[RELOP] = RELOP
first[REPEAT] = REPEAT
first[RETURN] = RETURN
first[RPAREN] = RPAREN
first[SEMI] = SEMI
first[SHIFTOP] = SHIFTOP
first[STRINGCONST] = STRINGCONST
first[TYPE] = TYPE
first[UNTIL] = UNTIL
first[VAR] = VAR
first[WHILE] = WHILE
first[ID] = ID
first[S] = SEMI , FUNC , CLASS , VAR
first[decls] = SEMI , FUNC , CLASS , VAR
first[funcdecl] = FUNC
first[braceblock] = LBRACE
first[optionalReturn] = COLON
first[optionalSemi] = SEMI
first[optionalPdecls] = ID
first[pdecls] = ID
first[pdecl] = ID
first[classdecl] = CLASS
first[memberdecls] = SEMI , VAR , FUNC
first[membervardecl] = VAR
first[memberfuncdecl] = FUNC
first[stmts] = SEMI , IF , WHILE , REPEAT , VAR , RETURN , BITNOTOP , NOTOP , ADDOP , PLUSPLUS , NUM , LPAREN , ID , FNUM , STRINGCONST , BOOLCONST
first[stmt] = IF , WHILE , REPEAT , VAR , RETURN , BITNOTOP , NOTOP , ADDOP , PLUSPLUS , NUM , LPAREN , ID , FNUM , STRINGCONST , BOOLCONST
first[assign] = BITNOTOP , NOTOP , ADDOP , PLUSPLUS , NUM , LPAREN , ID , FNUM , STRINGCONST , BOOLCONST
first[cond] = IF
first[loop] = WHILE , REPEAT
first[return] = RETURN
first[vardecl] = VAR
first[expr] = BITNOTOP , NOTOP , ADDOP , PLUSPLUS , NUM , LPAREN , ID , FNUM , STRINGCONST , BOOLCONST
first[orexp] = BITNOTOP , NOTOP , ADDOP , PLUSPLUS , NUM , LPAREN , ID , FNUM , STRINGCONST , BOOLCONST
first[andexp] = BITNOTOP , NOTOP , ADDOP , PLUSPLUS , NUM , LPAREN , ID , FNUM , STRINGCONST , BOOLCONST
first[relexp] = BITNOTOP , NOTOP , ADDOP , PLUSPLUS , NUM , LPAREN , ID , FNUM , STRINGCONST , BOOLCONST
first[bitexp] = BITNOTOP , NOTOP , ADDOP , PLUSPLUS , NUM , LPAREN , ID , FNUM , STRINGCONST , BOOLCONST
first[shiftexp] = BITNOTOP , NOTOP , ADDOP , PLUSPLUS , NUM , LPAREN , ID , FNUM , STRINGCONST , BOOLCONST
first[sumexp] = BITNOTOP , NOTOP , ADDOP , PLUSPLUS , NUM , LPAREN , ID , FNUM , STRINGCONST , BOOLCONST
first[prodexp] = BITNOTOP , NOTOP , ADDOP , PLUSPLUS , NUM , LPAREN , ID , FNUM , STRINGCONST , BOOLCONST
first[powexp] = BITNOTOP , NOTOP , ADDOP , PLUSPLUS , NUM , LPAREN , ID , FNUM , STRINGCONST , BOOLCONST
first[unaryexp] = BITNOTOP , NOTOP , ADDOP , PLUSPLUS , NUM , LPAREN , ID , FNUM , STRINGCONST , BOOLCONST
first[preincexp] = PLUSPLUS , NUM , LPAREN , ID , FNUM , STRINGCONST , BOOLCONST
first[postincexp] = NUM , LPAREN , ID , FNUM , STRINGCONST , BOOLCONST
first[amfexp] = NUM , LPAREN , ID , FNUM , STRINGCONST , BOOLCONST
first[factor] = NUM , LPAREN , ID , FNUM , STRINGCONST , BOOLCONST
first[calllist] = BITNOTOP , NOTOP , ADDOP , PLUSPLUS , NUM , LPAREN , ID , FNUM , STRINGCONST , BOOLCONST
first[calllist2] = BITNOTOP , NOTOP , ADDOP , PLUSPLUS , NUM , LPAREN , ID , FNUM , STRINGCONST , BOOLCONST
